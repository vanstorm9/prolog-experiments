#const n = 10.

sorts
    #step = 0 .. n.
    #num_dose = 0 ..n.
    #person = {hanayo, umi, eli, rin, honoka, nozomi, maki, kotori, nico}.
    #vaccine = {hboc,prpomp}.
    #fluent = contains(#person, #vaccine).
    #action = give(#person, #vaccine).
    
predicates
    holds(#fluent, #step).
    occurs(#action, #step).
    dose(#vaccine, #num_dose).
    mixed_series(#person, #step).
    
rules
    dose(hboc,4).
    dose(prpomp,3).

    occurs(give(hanayo,hboc),0).
    occurs(give(hanayo,prpomp),1).

    % The person contains a vaccine dose if he/she was given a vaccine dose
    % Person P contains vaccine X at step I+1,if person P is given vaccine X at step I
    
    holds(contains(P,X),I+1):- occurs(give(P,X),I).

    % Inertia axiom
    % Person P contains vaccine X at step I+1, if person P was given vaccine X at step I 
    
    holds(contains(P,X),I+1):- holds(contains(P,X),I).
    

    % Person P has mixed series at step I,
    %   if person P contains vaccine A at step I,  
    %   if person P contains vaccine B at step I,
    %   A does NOT equal to B
    
    mixed_series(P,I):-
        holds(contains(P,A),I),
        holds(contains(P,B),I),
        A != B.
        
    
    % Closed world assumption
    % It is not a mixed series, if we do not have a reason to believe it is a mixed series
    -mixed_series(P,I):- not mixed_series(P,I).

 
