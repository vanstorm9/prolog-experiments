% Situation
%The following is an except from a CPG and a local customization of the CPG

% A general CPG (Clinical Practice Guideline) states

% There are two different brands of Hib vaccine, HbOC and PRPOMP. The guideline recommends that a child should receive all of one brand or all of the other. It takes four doses to complete the series using HbOC and three doses using PRPOMP.

% If a child has already received both brands (a mixed series), then all doses are treated as if they were HbOC and the four-dose schedule is used.

% A local customization of the CPG allows a special schedule using PRPOMP for dose 1 and HbOC for doses 2 to 4.



% AGENDA
% - Can actions that uses all of the same vaccine be generalized into one relation function?
% - Fix the part in which duplicate paths appear if history feature is used
% - Implement state system (in order to implement next vaccine feature)
% - Next vaccine feature
% - Implement weight heuristics



% Set the const n value to a lower number so that paths with unnecessary actions 
% will not be printed oout
#const n = 4.   
#const max_dose_num = 4.   
#const remain_num = 4.

sorts
    #step = 0 .. n.
    #cur_dose = 0 .. n.
    #dose_num = 0 .. max_dose_num.
    #rem_num = 0 .. remain_num.
    #person = {hanayo,umi,eli,rin, honoka, nozomi, maki, kotori, nico}.
    #vaccine = {hboc,prpomp}.
    #completed = {complete, incomplete}.
    #bool = {true, false}.
    #fluent = contains(#person, #vaccine, #cur_dose, #completed).
    #action = give(#person, #vaccine).
    
predicates

    history(#fluent, #step).

    dose_set(#vaccine, #dose_num).  
    
    remain_dose(#rem_num,#person, #vaccine, #step).
    
    occurs(#action, #step).
    holds(#fluent, #step).
    recent_dose(#person, #vaccine, #step).
    
    mixed_case(#person, #bool).
    
    happens(#step).
    success(#bool).
    goal(#step).
    
    
rules

    % We are initiating the dose requirements for the vaccines
    dose_set(hboc,4).
    dose_set(prpomp,3).

    % Remaining dose is max_dose - current dose (Z-D) at step I
    remain_dose(Z-D, P, V, I):-
        holds(contains(P,V,D,C), I),
        dose_set(V,Z),
        not -remain_dose(Z-D, P, V,I).
        
    % Prevents already completed states from being printed out
    -remain_dose(Z-D, P, V,I):-
        holds(contains(P,V,D,C), I),
        dose_set(V,Z),
        D >= Z.
        
        
    mixed_case(P,true):- 
        holds(contains(P,X1, D, C), I),
        occurs(give(P, X2), I),
        X1 != X2.
        
    mixed_case(P,true):- 
        history(contains(P, X1, D, C),  I-1),
        holds(contains(P,X2, D, C), I),
        X1 != X2,
        I != 0.
        
        
    % Update the history if person P contains vaccine X at step I
    history(contains(P, X, D, C),  I-1) :- holds(contains(P,X,D,C),I), I!=0.

    %history(contains(P, X, D, C),  I) :- occurs(give(P,X),I).
        

    % No need for an inertia axiom, we do not want things to stay the same in the next step
    % Instead, we want there to be an update for each step (as we transition to next state)
    
    %%%%%%%%%%%%%%%%%%%% All doses are the same testcase %%%%%%%%%%%%%%%%%%%% 
    
    %%%%%%%%%%%%%% hboc %%%%%%%%%%%%%%
    % Transition to  next step and set to complete
    holds(contains(P,hboc,D+1,complete),I+1):-  
        holds(contains(P, hboc, D, C),I),     % If vaccine is hboc in the current step
        occurs(give(P,hboc),I),     % this prevents entire graph from printing out
        dose_set(hboc,N),
        (D+1) = N.  % The total amount of dose now must equal to 4.

    % Transition to  next step (still set to incomplete)
    holds(contains(P,hboc,D+1,incomplete),I+1):-  
        holds(contains(P, hboc, D, C),I),     % If vaccine is hboc in the current step
        occurs(give(P,hboc),I),    % this prevents entire graph from printing out
        dose_set(hboc,N),
        (D+1) < N.   % The total amount of dose is lower than four

    %%%%%%%%%%%%%% prpomp %%%%%%%%%%%%%%
    holds(contains(P, prpomp, D+1, complete),I+1):-
        holds(contains(P, prpomp, D, C), I),
        occurs(give(P,prpomp),I),
        dose_set(prpomp,N),
        (D+1) = N.
        
    holds(contains(P, prpomp, D+1, incomplete), I+1):-
        holds(contains(P, prpomp, D, C), I),
        occurs(give(P, prpomp), I),
        dose_set(prpomp,N),
        (D+1) < N.

    %%%%%%%%%%%%%%%%%%%% Special case %%%%%%%%%%%%%%%%%%%%
    holds(contains(P, hboc, D+1, incomplete), I+1):-
        mixed_case(P,true),
        dose_set(hboc,N),
        (D+1) < N.
    
    holds(contains(P, hboc, D+1, incomplete), I+1):-
        holds(contains(P,prpomp, D, C), I),
        occurs(give(P, hboc),I),
        dose_set(hboc,N),
        (D+1) < N.
    


        

     % If something occurs, that means something happens
    happens(I) :- occurs(A,I).
    
    % If person P was given vaccine X at step I, then the recent dose for person P at step I is vaccine X
    recent_dose(P,X,I+1) :- occurs(give(P,X),I).
    
    
    % Do not allow concurrent actions
    :- occurs(give(P,X1),I),
        occurs(give(P,X2),I),
        X1 != X2.
    
    % A patient may not have two states in more than one step
    :- holds(contains(P,X1,D1,C1),I),
        holds(contains(P,X2,D2,C2),I),
        D1 != D2.
        
        
    % an action will not occur for a patient without a selected plan
    % note that patients that are objects must be declared as not having
    % a plan or the system may create one for them  
    -occurs(give(P,X),I):-
        -holds(contains(P,X1,D1,C1), 0).   
        
    % if goal is complete, there are no more vaccine adminstrations
    holds(contains(P,X,D,complete), I+1):- holds(contains(P,X,D,complete),I).
    -occurs(give(P,X),I):- holds(contains(P,X,D,complete),I).
    
    %%%%%%%%%%% Goal and Success states %%%%%%%%%%%

    % When goal is not reached, an action must be selected at each step
    occurs(A,I) | -occurs(A,I) :- not goal(I).

    
    % Sucess is reached when the goal has been reached
    success(true) :- goal(I), I <= n.
    
    % Success must be reached
    :- not success(true).
    
    % It is not possible for nothing to happen while the goal is not reached
    :- not happens(I), not goal(I).
 
    % Defined goal
    % goal is reached if our we reach the "complete" condition
    goal(I):- holds(contains(hanayo,V,D,complete),I).
       
    %%%%%% Inital State %%%%%%

    % We are ignoring the sea, cat, honk, moo, tomato, bird, Nico-chan and Elichika for now
    -holds(contains(umi,V,D,C),I).
    -holds(contains(eli,V,D,C),I).
    -holds(contains(rin,V,D,C),I).
    -holds(contains(honoka,V,D,C),I).
    -holds(contains(nozomi,V,D,C),I).
    -holds(contains(maki,V,D,C),I).
    -holds(contains(kotori,V,D,C),I).
    -holds(contains(nico,V,D,C),I).


    
     % Koizumi Hanayo is our patient for this program
    
    % Test case 1 (all 4 hboc)
    %history(contains(hanayo, hboc, 0, incomplete),  0).
    %holds(contains(hanayo,hboc,1,incomplete),1).
    
    % Test case 2 (all 3 prpomp)
    %holds(contains(hanayo,prpomp,0,incomplete),0).
    
    
    % Test case 3 (mixed vaccines)
    history(contains(hanayo, hboc, 0, incomplete),  0).
    history(contains(hanayo, prpomp, 1, incomplete),  1).
    holds(contains(hanayo,prpomp,1,incomplete),1).
    
    
     % Test case 4 (special scheduling)  (PASSED)
    %history(contains(hanayo, prpomp, 0, incomplete),  0).
    %history(contains(hanayo, hboc, 1, incomplete),  1).
    %holds(contains(hanayo,hboc,1,incomplete),1).

    
% Allows us to display the planned path in terms of occurs and holds.
display
    %mixed_case(P,T).
    %history(X0,Y0).
    %occurs(X1,Y1).
    %holds(X2,Y2).
    remain_dose(W3,X3, Y3, Z3).
    %recent_dose(X3, Y3, Z3).
